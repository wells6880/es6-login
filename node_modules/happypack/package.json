{
  "_args": [
    [
      {
        "raw": "happypack@^4.0.0",
        "scope": null,
        "escapedName": "happypack",
        "name": "happypack",
        "rawSpec": "^4.0.0",
        "spec": ">=4.0.0 <5.0.0",
        "type": "range"
      },
      "D:\\WEB\\es6-login"
    ]
  ],
  "_cnpm_publish_time": 1516627758220,
  "_from": "happypack@^4.0.0",
  "_hasShrinkwrap": false,
  "_id": "happypack@4.0.1",
  "_location": "/happypack",
  "_nodeVersion": "6.3.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/happypack-4.0.1.tgz_1516627757050_0.920346224680543"
  },
  "_npmUser": {
    "name": "amireh",
    "email": "ahmad@amireh.net"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "happypack@^4.0.0",
    "scope": null,
    "escapedName": "happypack",
    "name": "happypack",
    "rawSpec": "^4.0.0",
    "spec": ">=4.0.0 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "http://registry.npm.taobao.org/happypack/download/happypack-4.0.1.tgz",
  "_shasum": "d71a6520d13c1ddf6cc5ca040cfe22711cba5209",
  "_shrinkwrap": null,
  "_spec": "happypack@^4.0.0",
  "_where": "D:\\WEB\\es6-login",
  "author": {
    "name": "Ahmad Amireh"
  },
  "bugs": {
    "url": "https://github.com/amireh/happypack/issues"
  },
  "dependencies": {
    "async": "1.5.0",
    "json-stringify-safe": "5.0.1",
    "loader-utils": "1.1.0",
    "serialize-error": "^2.1.0"
  },
  "description": "webpack speed booster, makes you happy!",
  "devDependencies": {
    "codecov": "1.0.1",
    "eslint": "2.13.1",
    "happypack-test-utils": "file:packages/happypack-test-utils",
    "mocha": "3.0.1",
    "multiline-slash": "2.0.0",
    "nyc": "7.1.0",
    "webpack-config-composer": "file:packages/webpack-config-composer"
  },
  "directories": {},
  "dist": {
    "shasum": "d71a6520d13c1ddf6cc5ca040cfe22711cba5209",
    "size": 25502,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/happypack/download/happypack-4.0.1.tgz"
  },
  "files": [
    "lib",
    "CHANGELOG.md",
    "LICENSE",
    "loader.js",
    "README.md"
  ],
  "gitHead": "b52947144dc62af938c874bf1a61c2147cfd42b4",
  "homepage": "https://github.com/amireh/happypack#readme",
  "keywords": [
    "webpack",
    "plugin",
    "fast",
    "speed",
    "performance",
    "compilation",
    "transformer",
    "loader",
    "happiness",
    "happy"
  ],
  "license": "MIT",
  "main": "./lib/HappyPlugin.js",
  "maintainers": [
    {
      "name": "amireh",
      "email": "ahmad@amireh.net"
    }
  ],
  "name": "happypack",
  "nyc": {
    "include": [
      "lib/*.js"
    ],
    "exclude": [
      "lib/**/*.test.js"
    ]
  },
  "optionalDependencies": {},
  "publish_time": 1516627758220,
  "readme": "# HappyPack [![Build Status](https://travis-ci.org/amireh/happypack.svg?branch=master)](https://travis-ci.org/amireh/happypack) [![codecov.io](https://codecov.io/github/amireh/happypack/coverage.svg?branch=master)](https://codecov.io/github/amireh/happypack?branch=master)\n\nHappyPack makes initial webpack builds faster by transforming files [in\nparallel](#how-it-works).\n\n## Usage\n\n```shell\nnpm install --save-dev happypack\n```\n\nHappyPack provides both a plugin and a loader in order to do its job so you\nmust use both to enable it.\n\nNormally, you define loader rules to tell webpack how to process certain files.\nWith HappyPack, you switch things around so that you pass the loaders to\nHappyPack's plugin and instead tell webpack to use `happypack/loader`.\n\nBelow is a sample configuration that shows those steps in action.\n\n```javascript\n// @file: webpack.config.js\nconst HappyPack = require('happypack');\n\nexports.module = {\n  rules: [\n    {\n      test: /.js$/,\n      // 1) replace your original list of loaders with \"happypack/loader\":\n      // loaders: [ 'babel-loader?presets[]=es2015' ],\n      use: 'happypack/loader',\n      include: [ /* ... */ ],\n      exclude: [ /* ... */ ]\n    }\n  ]\n};\n\nexports.plugins = [\n  // 2) create the plugin:\n  new HappyPack({\n    // 3) re-add the loaders you replaced above in #1:\n    loaders: [ 'babel-loader?presets[]=es2015' ]\n  })\n];\n```\n\nThat's it. Now sources that match `.js$` will be handed off to HappyPack which\nwill transform them in parallel using the loaders you specified (`babel-loader`\nin this example.)\n\n## Configuration\n\nThese are the parameters you can pass to the plugin when you instantiate it.\n`loaders` is the only required parameter.\n\n### `loaders: Array`\n\nEach entry consists of the name (or absolute path) of the loader that\nwould transform the files and an optional query string to pass to it. This\nlooks similar to what you'd pass to webpack's `loader` config.\n\n> **Heads up!**\n>\n> HappyPack doesn't work with *all* webpack loaders as some loader API are not\n> supported.\n>\n> See [this wiki page](https://github.com/amireh/happypack/wiki/Webpack-Loader-API-Support) for more details on current Loader API support.\n\nThe following notations are officially supported and are all equivalent:\n\n```javascript\n{\n  loaders: [\n    // a string with embedded query for options\n    'babel-loader?presets[]=es2015',\n\n    {\n      loader: 'babel-loader'\n    },\n\n    // \"query\" string\n    {\n      loader: 'babel-loader',\n      query:  '?presets[]=es2015'\n    },\n\n    // \"query\" object\n    {\n      loader: 'babel-loader',\n      query: {\n        presets: [ 'es2015' ]\n      }\n    },\n\n    // Webpack 2+ \"options\" object instead of \"query\"\n    {\n      loader: 'babel-loader',\n      options: {\n        presets: [ 'es2015' ]\n      }\n    }\n  ]\n}\n```\n\n### `id: String`\n\nA unique id for this happy plugin. This is used by the loader to know which\nplugin it's supposed to talk to.\n\nNormally, you would not need to specify this unless you have more than one\nHappyPack plugin defined, in which case you'll need distinct IDs to tell them\napart. See [this section](#using-multiple-instances) for more information.\n\nDefaults to: `\"1\"`\n\n### `threads: Number`\n\nThis number indicates how many Node VMs HappyPack will spawn for compiling\nthe source files. After a lot of tinkering, I found 4 to yield the best\nresults. There's certainly a diminishing return on this value and increasing\nbeyond 8 actually slowed things down for me.\n\nKeep in mind that this is only relevant when performing **the initial build**\nas HappyPack will switch into a synchronous mode afterwards (i.e. in `watch`\nmode.)\n\nDefaults to: `3`\n\n### `threadPool: HappyThreadPool`\n\nA pre-defined thread-pool to use for retrieving worker threads. Normally, this\nis managed internally by each `HappyPlugin` instance, but you may override\nthis behavior for better results.\n\n[The section on thread pools](#shared-thread-pools) explains how and when to\nuse this.\n\nDefaults to: `null`\n\n### `verbose: Boolean`\n\nEnable this to log status messages from HappyPack to STDOUT like start-up\nbanner, etc..\n\nDefaults to: `true`\n\n### `verboseWhenProfiling: Boolean`\n\nEnable this if you want HappyPack to still produce its output even when you're\ndoing a `webpack --profile` run. Since this variable was introduced, HappyPack\nwill be silent when doing a profile build in order not to corrupt any JSON\noutput by webpack (i.e. when using `--json` as well.)\n\nDefaults to: `false`\n\n### `debug: Boolean`\n\nEnable this to log diagnostic messages from HappyPack to STDOUT. Useful for\ntroubleshooting.\n\nDefaults to: `false`\n\n## How it works\n\n![A diagram showing the flow between HappyPack's components](doc/HappyPack_Workflow.png)\n\nHappyPack sits between webpack and your primary source files (like JS sources)\nwhere the bulk of loader transformations happen. Every time webpack resolves a\nmodule, HappyPack will take it and all its dependencies and distributes those\nfiles to multiple worker \"threads\".\n\nThose threads are actually simple node processes that invoke your transformer.\nWhen the compiled version is retrieved, HappyPack serves it to its loader and\neventually your chunk.\n\n## Using multiple instances\n\nIt's possible to define multiple HappyPack plugins for different types of\nsources/transformations. Just pass in a unique id for each plugin and make\nsure you pass it their loaders. For example:\n\n```javascript\n// @file webpack.config.js\nexports.plugins = [\n  new HappyPack({\n    id: 'jsx',\n    threads: 4,\n    loaders: [ 'babel-loader' ]\n  }),\n\n  new HappyPack({\n    id: 'styles',\n    threads: 2,\n    loaders: [ 'style-loader', 'css-loader', 'less-loader' ]\n  })\n];\n\nexports.module.rules = [\n  {\n    test: /\\.js$/,\n    use: 'happypack/loader?id=jsx'\n  },\n\n  {\n    test: /\\.less$/,\n    use: 'happypack/loader?id=styles'\n  },\n]\n```\n\nNow `.js` files will be handled by the first Happy plugin which will use\n`babel-loader` to transform them, while `.less` files will be handled\nby the second one using the style loaders.\n\n## Shared thread pools\n\nNormally, each HappyPack plugin you create internally creates its own threads\nwhich are used to run the loaders. However, if you're using more than one\nHappyPack plugin it can be more optimal to create a thread pool yourself and\nthen configure the plugins to share that pool, minimizing the idle time of\nthreads within it.\n\nHere's an example of using a custom pool of 5 threads that will be shared\nbetween loaders for both JS and SCSS/LESS/whatever sources:\n\n```javascript\n// @file: webpack.config.js\nvar HappyPack = require('happypack');\nvar happyThreadPool = HappyPack.ThreadPool({ size: 5 });\n\nmodule.exports = {\n  // ...\n  plugins: [\n    new HappyPack({\n      id: 'js',\n      threadPool: happyThreadPool,\n      loaders: [ 'babel-loader' ]\n    }),\n\n    new HappyPack({\n      id: 'styles',\n      threadPool: happyThreadPool,\n      loaders: [ 'style-loader', 'css-loader', 'less-loader' ]\n    })\n  ]\n};\n```\n\n## Benchmarks\n\nFor the main repository I tested on, which had around 3067 modules, the build time went down from 39 seconds to a whopping ~10 seconds.\n\nHere's a rundown of the various states the build was performed in:\n\nElapsed (ms) | Happy?  | Using DLLs? |\n------------ | ------- | ----------- |\n39851        | NO      | NO          |\n37393        | NO      | YES         |\n14605        | YES     | NO          |\n13925        | YES     | NO          |\n11877        | YES     | NO          |\n9228         | YES     | YES         |\n\nThe builds above were run under Linux on a machine with 12 cores.\n\n## Changes\n\nSee [./CHANGELOG.md](./CHANGELOG.md).\n\n## FAQ\n\n### Does it work with webpack 2?\n\nAs of version 3.0.3, it does to a certain extent. You can look at\nthe [pending issues](https://github.com/amireh/happypack/issues?q=is%3Aopen+is%3Aissue+label%3Awebpack2) to see if any of those\naffect you.\n\nIf you come across an issue that is exclusive to webpack 2, a fix has\nto be provided by the community (or you) as the author currently has no\nplans for providing webpack 2 support.\n\n### Does it work with TypeScript?\n\nThe short answer is: yes, it finally does! The longer answer is that you need\nto use [ts-loader](https://github.com/TypeStrong/ts-loader) in \n\"transpiling-only\" mode then use the special plugin [fork-ts-checker-notifier-webpack-plugin](https://github.com/johnnyreilly/fork-ts-checker-notifier-webpack-plugin) to perform static type checking.\n\nMore information can be found in the [ts-loader \"happypack mode\" section](https://github.com/TypeStrong/ts-loader#happypackmode-boolean-defaultfalse) and you can refer to the [example](./examples/ts-loader) that shows this in action.\n\nBig thanks to @johnnyreilly, @aindlq, @piotr-oles, @abergs and many others for\nmaking this work.\n\n### Does it work with loader XYZ?\n\nWe're keeping track of loader support in [this wiki page](https://github.com/amireh/happypack/wiki/Loader-Compatibility-List). Some loaders may require \nextra configuration to make them work.\n\nIf the loader you're trying to use isn't listed there, you can refer to [this](https://github.com/amireh/happypack/wiki/Webpack-Loader-API-Support) wiki page\nto see which loader APIs are supported. If your loader uses any API that is NOT\nsupported, chances are that it will not work with HappyPack.\n\nAs a general rule, any loader that accepts \"functions\" in options will not work\nunless it also accepts reading those options from a file, like babel-loader\ndoes with `.babelrc` and postcss-loader too.\n\n## Does it work under Windows?\n\nYes, as of version 4.0.0 it should. If you come across issues using the plugin\non Windows, feel free to open a ticket.\n\n## License (MIT)\n\nCopyright (c) <2015-2017> <ahmad@amireh.net>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/amireh/happypack.git"
  },
  "scripts": {
    "coverage": "nyc report",
    "coverage:ci": "nyc report --reporter=text-lcov > tmp/coverage.lcov && codecov --disable search -f tmp/coverage.lcov",
    "coverage:html": "nyc report --reporter html",
    "lint": "eslint lib",
    "prepublish": "npm run lint && npm run test:webpack1 && npm run test:webpack2 && npm run test:webpack3 && npm run test:examples",
    "test": "npm run test:webpack1",
    "test:coverage": "nyc npm test",
    "test:examples": "./examples/build-all.sh",
    "test:webpack1": "NODE_PATH=upstream/webpack1/node_modules mocha --opts .mocha",
    "test:webpack2": "NODE_PATH=upstream/webpack2/node_modules mocha --opts .mocha",
    "test:webpack3": "NODE_PATH=upstream/webpack3/node_modules mocha --opts .mocha"
  },
  "version": "4.0.1"
}
